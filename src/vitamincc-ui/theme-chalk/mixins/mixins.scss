@forward 'config';
@use 'config' as *;

// namespace
// e.g.
// @b(block) => ns-block
@mixin b($block) {
  $B: $namespace + '-' + $block !global;
  .#{$B} {
    @content;
  }
}

// e.g.
// @e(element) => ns-block__element
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector +
      '.' +
      $B +
      $element-separator +
      $unit +
      ','};
  }
  // @debug $currentSelector;

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

// e.g.
// @m(modifier) => ns-block--modifier
@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ','};
  }
  // $currentSelector: $selector + $modifier-separator + $modifier;
  // @debug $currentSelector;

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

// when
// e.g.
// @include when(disabled) => .is-disabled
// @include when(disabled, inner) => .is-disabled .inner
@mixin when($state, $child: '') {
  $selector: &;
  @at-root {
    &.#{$state-prefix + $state} {
      @if $child != '' {
        #{$selector + $child} {
          @content;
        }
      } @else {
        @content;
      }
    }
  }
}

// pseudo
// e.g.
// @include pseudo(after) => :after
@mixin pseudo($pseudo, $child: '') {
  $selector: &;
  @at-root #{&}#{':#{$pseudo}'} {
    @if $child != '' {
      #{$child} {
        @content;
      }
    } @else {
      @content;
    }
  }
}
